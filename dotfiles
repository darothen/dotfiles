#!/usr/bin/env python
""" Install dotfiles, optionally for a specific machine.

"""
from __future__ import print_function

import errno
import fnmatch
import os
import re

#: Suffix patterns to ignore
EXCLUDES = ["*~", ]
EXCLUDES = r'|'.join([fnmatch.translate(x) for x in EXCLUDES])

DOTFILES = ['atom', 'bash', 'bin', 'conda', 'emacs', 'git', 'test', 'tmux', ÃŸ'zsh']
MACHINES = [
    "mbp",         # Work MacbookPro/OSX config
    "legion",      # legion.mit.edu
    "svante",      # svante.mit.edu
    "yellowstone", # NCAR Yellowstone Supercomputer
    "newton",      # Singapore Supercomputing Center
    "ubuntu",      # Home/personal Ubuntu config
    "climacell",   # ClimaCell work MBP
    "midway",      # Midway cluster at UChicago, midway.rcc.uchicago.edu
    "daniel-dev",  # ClimaCell R&D VM
    "default",     # Barebones, no-configuration
]


from argparse import ArgumentParser, RawDescriptionHelpFormatter
parser = ArgumentParser(description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument("machine", type=str, choices=MACHINES,
                    help="Name of machine for installation of bash scripts")
parser.add_argument("-O", "--overwrite", action='store_true',
                    help="Overwrite any pre-existing dotfiles")
parser.add_argument("-n", "--dry-run", action='store_true',
                    help="Indicate changes to be made without actually running them")


def link(path_to_target, path_to_symlink, overwrite=False, dry=True):
    """ Convenience function for symlinking; takes care of
    printing information and overwriting files if necessary. """

    link_str_fmt = "{mode:s} {target:s} -> {src:s}"

    MODE = "Linking"

    root_dir = os.path.split(path_to_symlink)[0]
    if not os.path.exists(root_dir):
        print("Creating directory at", root_dir)
        if not dry: os.makedirs(root_dir)

    try:
        if not dry: os.symlink(path_to_target, path_to_symlink)
    except OSError as e:
        if (e.errno == errno.EEXIST) and overwrite:  # File already exists, and we want to over-write
            os.remove(path_to_symlink)
            if not dry: os.symlink(path_to_target, path_to_symlink)
            MODE = "Overwriting"
        elif (e.errno == errno.EEXIST):
            MODE = "Ignoring"
    print(link_str_fmt.format(mode=MODE, target=path_to_target,
                              src=path_to_symlink))


def _strip_root(fn):
    """ Strip the root directory from a filepath """
    fn = fn.lstrip(os.sep)  # Get rid of leading /
    return fn[fn.index(os.sep)+1:]


def _get_files(dotfile):
    """ Walk a dotfile path and get all the files (potentially) in
    subdirectories) tthat will be linked, except for excluded files.

    """
    filepaths = []
    for root, _, files in os.walk(dotfile):
        # print(root, _, files)
        # Prepend root to build absolute path
        # NOTE: don't actually need, because we're listing the dotfile
        #       path directly
        files = [_strip_root(os.path.join(root, f)) for f in files]

        # Filter the excluded files
        files = filter(lambda f: not re.match(EXCLUDES, f), files)
        # files = [f for f in files if not re.match(EXCLUDES, f)]

        filepaths.extend(files)
    return filepaths


def install(machine, overwrite, dry):

    HOME = os.environ['HOME']
    DOT_DIR = os.getcwd()

    if machine is None:
        print("Not looking for machine-specific additional file.")
        machine = "default"
    exclude_machines = [m for m in MACHINES if m != machine]

    for dotfile in DOTFILES:
        print("==", dotfile, "==")

        files = _get_files(dotfile)
        for m in exclude_machines:
            files = [f for f in files if not f.endswith('.' + m)]

        for fn in files:
            # print("   ", fn)

            src = os.path.abspath(os.path.join(dotfile, fn))
            dest = os.path.join(HOME, fn)

            # Is this a machine-specific file?
            if dest.endswith("." + machine):
                dest = dest.replace("." + machine, "")

            print("ln {} -> {}".format(dest, src))
            link(src, dest, overwrite, dry)


if __name__ == "__main__":

    args = parser.parse_args()
    print("Installing for machine {}".format(args.machine), end="\n")
    install(args.machine, args.overwrite, args.dry_run)

